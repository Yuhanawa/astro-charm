---
import { Icon } from "./../integrations/astro-icon/components";
import type { CollectionEntry } from "astro:content";
import { CustomPostHeaderTop, CustomPostHeaderBottom } from "charm:custom";

type Props = {
  postEntry: CollectionEntry<"posts">;
  /* `CollectionEntry<"posts">`
    {
      id: string;
      render(): Render[".md"];
      slug: string;
      body: string;
      collection: "posts";
      data: {
        title: string;
        published: Date;
        draft: boolean;
        hidden: boolean;
        image?: {
            src: string;
            width: number;
            height: number;
            format: "png" | "jpg" | "jpeg" | "tiff" | "webp" | "gif" | "svg" | "avif";
        } | {
            ...;
        } | undefined;
        description?: string | undefined;
        updated?: Date | undefined;
        category?: string | undefined;
        tags?: string[] | undefined;
      };
      rendered?: RenderedContent;
      filePath?: string;
    };
  */
};

const { postEntry } = Astro.props;
const data = postEntry.data;
const timeData = (data.updated || data.published).getTime();
const years = Math.floor((Date.now() - timeData) / (365 * 24 * 60 * 60 * 1000));
---

{
  data.draft && (
    <div class="admonition warning">
      <span class="title">Draft Warning</span>
      <p>
        This is a draft article that is still being worked on, It isn't
        displayed on production site.
      </p>
    </div>
  )
}

<CustomPostHeaderTop postEntry={postEntry} />

<h1>{data.title}</h1>

<p class="inline-meta">
  {
    data.published && (
      <>
        <span>published: </span>
        <time datetime={data.published.toISOString()}>
          {data.published.toLocaleDateString()}
        </time>
      </>
    )
  }
  {data.published && data.updated && <span> and </span>}
  {
    data.updated && (
      <>
        <span>updated: </span>
        <time datetime={data.updated.toISOString()}>
          {data.updated.toLocaleDateString()}
        </time>
      </>
    )
  }
</p>

<p class="inline-meta" data-pagefind-ignore>
  <span class="category">
    <Icon name="solar:bookmark-bold-duotone" />
    <a href={`/categories/${data.category}`}>
      {data.category}
    </a>
  </span>
  {
    data.tags && data.tags.length > 0 && (
      <span class="tags">
        <Icon name="solar:tag-bold-duotone" />
        {data.tags.slice(0, 3).map((tag, i) => (
          <span class="post-list-tag-item">
            {i !== 0 && ", "}
            <a href={`/tags/${tag}`}>{tag}</a>
          </span>
        ))}
      </span>
    )
  }
</p>

{
  years > 1 && (
    <div
      class:list={["admonition", years < 3 ? "note" : "warning"]}
      data-pagefind-ignore
    >
      <span class="title">
        Timeliness Warning Â· Last updated
        {(() => {
          const months =
            Math.floor((Date.now() - timeData) / (30 * 24 * 60 * 60 * 1000)) %
            12;
          return months === 11
            ? `${years + 1} years ago`
            : `${years} year${years > 1 ? "s" : ""}${months > 0 ? ` ${months} month${months > 1 ? "s" : ""}` : ""} ago`;
        })()}
      </span>
      <p>
        <strong>
          The information in this article may be outdated. Please verify
          carefully.
        </strong>
      </p>
    </div>
  )
}

{
  data.hidden && (
    <div class="admonition note" data-pagefind-ignore>
      <span class="title">This article is hidden from post list</span>
    </div>
  )
}

<CustomPostHeaderBottom postEntry={postEntry} />

<style>
  .inline-meta {
    font-size: 0.95rem;
    gap: 0.25em;
    margin-top: 0.5em;
    margin-bottom: 0.25em;
  }

  .category,
  .tags {
    align-items: center;
    display: inline-flex;
    gap: 0.25em;
  }
</style>
